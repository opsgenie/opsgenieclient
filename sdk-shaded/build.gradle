buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'signing'
apply from: "${project(':sdk').projectDir}/pom.gradle"


dependencies {
    shadow project(':sdk')
}

shadowJar {
    classifier = null
    relocate 'org', 'com.opsgenie.lib.org'
    relocate 'io', 'com.opsgenie.lib.io'
    relocate 'javax', 'com.opsgenie.lib.javax'
    relocate 'com.fasterxml', 'com.opsgenie.lib.com.fasterxml'
    relocate 'com.migcomponents', 'com.opsgenie.lib.com.migcomponents'
    relocate 'com.sun', 'com.opsgenie.lib.com.sun'

    configurations = [project.configurations.shadow]
}

jar {
    manifest {
        attributes("Built-By": "http://www.opsgenie.com",
                "Specification-Title": "OpsGenie Java SDK",
                "Specification-Product": "opsgenie-java-sdk",
                "Specification-Version": project.version,
                "Specification-Vendor": "http://www.opsgenie.com",
                "Implementation-Title": "OpsGenie Java SDK",
                "Implementation-Product": "opsgenie-java-sdk",
                "Implementation-Vendor": "http://www.opsgenie.com",
                "Implementation-Version": project.version,
        )
    }
}

tasks.check.dependsOn 'shadowJar'
tasks.shadowJar.dependsOn project(':sdk').tasks.jar

task sourcesJar(type: Jar) {
    classifier 'sources'
    from project(':sdk').sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: ':sdk:javadoc') {
    classifier 'javadoc'
    from project(':sdk').javadoc.destinationDir
}

jar.onlyIf {
    false
}

artifacts {
    archives shadowJar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: String.valueOf(System.getenv('ORG_GRADLE_PROJECT_SONATYPE_USERNAME')), password: String.valueOf(System.getenv('ORG_GRADLE_PROJECT_SONATYPE_PASSWORD')))
            }

            populatePom(pom)
        }
    }
}