buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.0'
    }
}

apply plugin: "os-package-base"

configurations {
    debian
}

dependencies {
    debian group: 'org.vafer', name: 'jdeb', version: '1.3'

    compile project(':common')
    compile 'org.apache.directory.studio:org.apache.commons.lang:2.6'
    compile 'org.apache.httpcomponents:httpcore:4.4.1'
    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    compile 'org.apache.httpcomponents:httpclient:4.4.1'
    compile 'io.netty:netty:3.6.6.Final'
    compile 'com.github.groovy-wslite:groovy-wslite:1.1.2'
    compile 'com.ning:async-http-client:1.9.38'
    compile 'org.json:json:20180813'
    // com.opsgenie.lib:pubnub:3.3.7 is not availble in maven central.
    compile ('com.pubnub:pubnub:3.4') {
      exclude module: 'netty'
    }
    compile 'org.littleshoot:littleproxy:0.5.3'

    testCompile project(':test')
}

tasks['build'].dependsOn 'packageMarid'
task packageMarid(dependsOn: ['packageMaridZip', 'packageMaridRpm', 'packageMaridDeb'])
task packageAll(dependsOn : 'packageMarid')

task packageMaridZip(dependsOn : 'generateMaridZip', type: Zip) {
    from "${buildDir}/zip"
    baseName = "opsgenie-marid"
}

def generateCommonClientStructure(String dataTarget) {
    def commonProjectDir = "${project(':common').projectDir}";

    copy {
        from project(':marid').configurations.runtime
        into "${dataTarget}/marid/lib"
    }

    copy {
        from project(':marid').jar.archivePath
        into "${dataTarget}/marid/lib"
    }

    copy {
        from "${commonProjectDir}/licenses"
        into "${dataTarget}/marid/licenses"
    }

    copy {
        from "${projectDir}/scripts"
        into "${dataTarget}/marid/scripts"
    }

    copy {
        from("${projectDir}/native") {
            exclude "marid.exe4j"
            exclude "marid_64.exe4j"
            exclude "marid_64.vmoptions"
            exclude "marid.vmoptions"
        }
        into "${dataTarget}/marid"
    }
}

task generateBaseForIntegration(dependsOn : 'jar') << {
    def dataTarget = "${project.rootProject.buildDir}/opsgenie-integration"
    copy {
        from "${projectDir}/conf/marid.conf"
        into "${dataTarget}/conf"
        rename "marid.conf", "opsgenie-integration.conf"
    }

    copy {
        from("${projectDir}/conf"){
            exclude "marid.conf"
        }
        into "${dataTarget}/marid/conf"
    }

    generateCommonClientStructure(dataTarget)

    copy {
        from("${projectDir}/native/marid_64.vmoptions")
        into "${dataTarget}/marid"
    }

    copy {
        from("${projectDir}/native/marid.vmoptions")
        into "${dataTarget}/marid"
    }

}

task generateMaridZip(dependsOn : 'jar') << {
    copy {
        from("${projectDir}/conf")
        into "${buildDir}/zip/marid/conf"
    }

    generateCommonClientStructure("${buildDir}/zip/")

    copy {
        from("${projectDir}/native/marid_64.vmoptions")
        filter{
            it.replace('/../conf/opsgenie-integration.conf', '/conf/marid.conf')
        }
        into "${buildDir}/zip/marid"
    }

    copy {
        from("${projectDir}/native/marid.vmoptions")
        filter{
            it.replace('/../conf/opsgenie-integration.conf', '/conf/marid.conf')
        }
        into "${buildDir}/zip/marid"
    }
}

task packageMaridRpm(type: Rpm, dependsOn: ['jar']) {
    def commonProjectDir = "${project(':common').projectDir}";

    packageName = 'opsgenie-marid'
    summary = "Opsgenie Marid Integration Server"
    packageDescription = "OpsGenie client files including marid. Please see doc for details: https://www.opsgenie.com/docs/"
    version = version.toString().replace("-", ".")
    os = LINUX
    user = 'root'
    release = '1.all'
    packager = "ifountain"
    vendor = "opsgenie"
    url = "https://www.opsgenie.com"
    license = "Apache License 2.0"
    buildHost = "repo.opsgenie.com"
    packageGroup = "System Administration Tools"


    preInstall file("${commonProjectDir}/native/ogBefore.sh")
    postInstall file("${commonProjectDir}/native/ogAfter.sh")

    from(project(':marid').configurations.runtime) {
        into 'var/lib/opsgenie/marid'
    }

    from(project(':marid').jar.archivePath) {
        into 'var/lib/opsgenie/marid'
    }

    from("${projectDir}/scripts") {
        fileType CONFIG | NOREPLACE
        into 'var/opsgenie/marid/scripts'
    }

    from("${commonProjectDir}/native/profile") {
        filter{
            it.replace('/conf/opsgenie-integration.conf', '/marid/marid.conf')
        }
        into 'etc/opsgenie'
    }

    from("${projectDir}/conf/marid.conf") {
        fileType CONFIG | NOREPLACE
        into 'etc/opsgenie/marid'
    }

    from("${projectDir}/conf/log.properties") {
        fileType CONFIG | NOREPLACE
        into 'etc/opsgenie/marid'
    }

    from("${projectDir}/conf/.keystore") {
        into 'etc/opsgenie/marid'
    }

    from("${commonProjectDir}/native/marid_rpm") {
        into 'etc/init.d/'
        rename 'marid_rpm', 'marid'
    }
}

task packageMaridDeb(dependsOn: ['jar']) << {
    def controlTarget = "${project.buildDir}/deb/control"
    def dataTarget = "${project.buildDir}/deb/data"

    def commonProjectDir = "${project(':common').projectDir}";
    def debVersion = version.toString().replace("-", ".")

    //CONTROL
    copy {
        from "${commonProjectDir}/native/conffiles_deb"
        filter{
            it.replace('/conf/opsgenie-integration.conf', '/marid/marid.conf')
        }
        into controlTarget
        rename "conffiles_deb", "conffiles"
    }

    copy {
        from "${commonProjectDir}/native/control_deb"
        filter {
            it.replace('[description]', "'OpsGenie client files including marid'")
                    .replace('[version]', debVersion)
                    .replace('[package-name]', "opsgenie-marid")
        }
        into controlTarget
        rename "control_deb", "control"
    }

    copy {
        from "${commonProjectDir}/native/ogBefore.sh"
        into controlTarget
        rename "ogBefore.sh", "preinst"
    }

    copy {
        from "${commonProjectDir}/native/ogAfter.sh"
        into controlTarget
        rename "ogAfter.sh", "postinst"
    }

    //DATA
    copy {
        from "${commonProjectDir}/native/marid_deb"
        into "${dataTarget}/etc/init.d"
        rename "marid_deb", "marid"
    }

    copy {
        from "${commonProjectDir}/native/profile"
        filter{
            it.replace('/conf/opsgenie-integration.conf', '/marid/marid.conf')
        }
        into "${dataTarget}/etc/opsgenie"
    }

    copy {
        from("${projectDir}/conf")
        into "${dataTarget}/etc/opsgenie/marid"
    }

    copy {
        from "${projectDir}/scripts"
        into "${dataTarget}/var/opsgenie/marid/scripts"
    }

    copy {
        from project(':marid').configurations.runtime
        into "${dataTarget}/var/lib/opsgenie/marid"
    }

    copy {
        from project(':marid').jar.archivePath
        into "${dataTarget}/var/lib/opsgenie/marid"
    }

    ant {
        taskdef(name: 'deb', classname: 'org.vafer.jdeb.ant.DebAntTask', classpath: configurations.debian.asPath)
    }
    ant.deb(destfile: "${project.buildDir}/distributions/opsgenie-marid_${debVersion}_all.deb", control: controlTarget) {
        ant.data(src: dataTarget, type: 'directory', dst: '/')
    }

    delete "${project.buildDir}/distributions/opsgenie-marid_${debVersion}_all.changes"
}
